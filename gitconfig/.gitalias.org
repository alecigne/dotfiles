#+title: Git aliases

* One-letter aliases
:PROPERTIES:
:header-args: :noweb-ref oneletter
:END:

One letter alias for our most frequent commands.

Guidelines: these aliases do not use options, because we want these
aliases to be easy to compose and use in many ways.

#+begin_src conf
  a = add
  b = branch
  c = commit
  d = diff
  f = fetch
  g = grep
  h = show
  l = log
  m = merge
  o = checkout
  p = pull
  r = remote
  s = status
  w = whatchanged
#+end_src

* Short aliases

Generally speaking, the alias should be in the same order as the
command name followed by its options.

- Right: fb = foo --bar
- Wrong: bf = foo --bar

** ~add~
:PROPERTIES:
:header-args: :noweb-ref add
:END:

add all

#+begin_src conf
  aa = add --all
#+end_src

add by patch - looks at each change, and asks if we want to put it in
the repo.

#+begin_src conf
  ap = add --patch
#+end_src

add just the files that are updated.

#+begin_src conf
  au = add --update
#+end_src

** ~branch~
:PROPERTIES:
:header-args: :noweb-ref branch
:END:

List all branches.

#+begin_src conf
  ba = branch -a
#+end_src

List all remote branches.

#+begin_src conf
  br = branch -r
#+end_src

branch - edit the description

#+begin_src conf
  be = branch --edit-description
#+end_src

branch and only list branches whose tips are reachable from the
specified commit (HEAD if not specified).

#+begin_src conf
  bm = branch --merged
#+end_src

branch and only list branches whose tips are not reachable from the
specified commit (HEAD if not specified).

#+begin_src conf
  bnm = branch --no-merged
#+end_src

** ~checkout~
:PROPERTIES:
:header-args: :noweb-ref checkout
:END:

Checkout in a new branch.

#+begin_src conf
  ob = checkout -b
#+end_src

** ~commit~
:PROPERTIES:
:header-args: :noweb-ref commit
:END:

Amend the tip of the current branch rather than creating a new commit.

#+begin_src conf
  ca = commit --amend
#+end_src

Amend the tip of the current branch, and do not edit the message.

#+begin_src conf
  cane = commit --amend --no-edit
#+end_src

Same, but add the files.

#+begin_src conf
  acane = commit -a --amend --no-edit
#+end_src

Add, commit, amend, no edit, message empty.

#+begin_src conf
  acaneme = commit -a --amend --no-edit --allow-empty-message
#+end_src

Commit with a message

#+begin_src conf
  cm = commit --message
#+end_src

Add and commit with message.

#+begin_src conf
  acm = commit -am
#+end_src

Commit with an empty message (aka "Git as a filesystem")

#+begin_src conf
  cme = commit --message \"\" --allow-empty-message
#+end_src

Add and commit with an empty message.

#+begin_src conf
  acme = commit -am \"\" --allow-empty-message
#+end_src

Add and commit with a "wip" message. The =!= is explained [[https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases][here]]:

#+begin_quote
As you can tell, Git simply replaces the new command with whatever you
alias it for. However, maybe you want to run an external command,
rather than a Git subcommand. In that case, you start the command with
a ! character. This is useful if you write your own tools that work
with a Git repository.
#+end_quote

#+begin_src conf
  wip = !git add -A && git commit -m "wip"
#+end_src

** ~diff~
:PROPERTIES:
:header-args: :noweb-ref diff
:END:

Show staged changes against the current HEAD.

#+begin_src conf
  dc = diff --cached
#+end_src

** ~fetch~
:PROPERTIES:
:header-args: :noweb-ref fetch
:END:

Fetch the remote, remove any remote-tracking references that no longer
exist on the remote (except tags) and fetch all tags from the remote.

#+begin_src conf
  fpt = fetch --prune --tags
#+end_src

** ~log~
:PROPERTIES:
:header-args: :noweb-ref log
:END:

~log~ with a text-based graphical representation of the commit
history.

#+begin_src conf
  lg = log --graph
#+end_src

~log~ with one line per item and a pretty format (taken from [[https://stackoverflow.com/questions/1441010/the-shortest-possible-output-from-git-log-containing-author-and-date#comment11498716_1441062][here]]).

#+begin_src conf
  lo = log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short
#+end_src

~log~ with patch generation.

#+begin_src conf
  lp = log --patch
#+end_src

~log~ with first parent, useful for team branch that only accepts pull
requests

#+begin_src conf
  lfp = log --first-parent
#+end_src

~log~ with items appearing in topological order, i.e. descendant
commits are shown before their parents.

#+begin_src conf
  lt = log --topo-order
#+end_src

~log~ like - we like this summarization our key performance
indicators. Also aliased as `log-like`.

#+begin_src conf
  ll = log --graph --topo-order --abbrev-commit --date=short --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cblue%G?%Creset'
#+end_src

** ~merge~
:PROPERTIES:
:CREATED:  [2024-02-23 Fri 16:00]
:header-args: :noweb-ref merge
:END:

#+begin_src conf
  mfo = merge --ff-only
  mnf = merge --no-ff
#+end_src

** ~pull~
:PROPERTIES:
:header-args: :noweb-ref pull
:END:

~pull~ if a merge can be resolved as a fast-forward, otherwise fail.

#+begin_src conf
  pf = pull --ff-only
#+end_src

~pull with rebase~ - to provide a cleaner, linear, bisectable history.

#+begin_src conf
  pr = pull --rebase
#+end_src

** ~rebase~
:PROPERTIES:
:header-args: :noweb-ref rebase
:END:

rebase - forward-port local commits to the updated upstream head.

#+begin_src conf
  rb = rebase
#+end_src

rebase abort - cancel the rebasing process

#+begin_src conf
  rba = rebase --abort
#+end_src

rebase - continue the rebasing process after resolving a conflict
manually and updating the index with the resolution.

#+begin_src conf
  rbc = rebase --continue
#+end_src

** ~show~
:PROPERTIES:
:header-args: :noweb-ref show
:END:

Show the content of the last commit.

#+begin_src conf
  hh = show @
#+end_src

** ~status~
:PROPERTIES:
:header-args: :noweb-ref status
:END:

status with short format instead of full details

#+begin_src conf
  ss = status --short
#+end_src

status with short format and showing branch and tracking info.

#+begin_src conf
  ssb = status --short --branch
#+end_src

* ~log~ aliases
:PROPERTIES:
:header-args: :noweb-ref log-aliases
:END:

Show log of changes, most recent first

#+begin_src conf
  log-changes = log --oneline --reverse
#+end_src

Show log of new commits after you fetched, with stats, excluding
merges

#+begin_src conf
  log-fresh = log ORIG_HEAD.. --stat --no-merges
#+end_src

Show log in our preferred format for our key performance
indicators. A.k.a. `ll`.

#+begin_src conf
  log-like = log --graph --topo-order --abbrev-commit --date=short --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cblue%G?%Creset'
#+end_src

Show log with dates in our local timezone

#+begin_src conf
  log-local = log --date=local
#+end_src

Show the log for my own commits by my own user email

#+begin_src conf
  log-my = !git log --author $(git config user.email)
#+end_src

Show log as a graph

#+begin_src conf
  log-graph = log --graph --all --oneline --decorate
#+end_src

Show the date of the earliest commit, in strict ISO 8601 format

#+begin_src conf
  log-first-date = !"git log --date-order --format=%cI | tail -1"
#+end_src

Show the date of the latest commit, in strict ISO 8601 format

#+begin_src conf
  log-latest-date = log -1 --date-order --format=%cI
#+end_src

Show the number of log entries by a specific date format

#+begin_src conf
  log-count-per-date-format = "!f() { d=\"$1\"; shift; git log $@ --format=oneline --format="%ad" --date=format:\"$d\" | awk '{a[$0]++}END{for(i in a){print i, a[i]}}' | sort; }; f"
#+end_src

Show the log of the recent hour, day, week, month, year

#+begin_src conf
  log-hour  = log --since "1 hour ago"
  log-day   = log --since "1 day ago"
  log-week  = log --since "1 week ago"
  log-month = log --since "1 month ago"
  log-year  = log --since "1 year ago"
#+end_src

Show the log of my own recent hour, day, week, month, year

#+begin_src conf
  log-my-hour  = log --author $(git config user.email) --since "1 hour ago"
  log-my-day   = log --author $(git config user.email) --since "1 day ago"
  log-my-week  = log --author $(git config user.email) --since "1 week ago"
  log-my-month = log --author $(git config user.email) --since "1 month ago"
  log-my-year  = log --author $(git config user.email) --since "1 year ago"
#+end_src

Show the number of log items by year, or month, or day, etc.

#+begin_src conf
  log-count-per-hour          = "!f() { git log-count-per-date-format \"%Y-%m-%dT%H\" $@ ; }; f"
  log-count-per-day           = "!f() { git log-count-per-date-format \"%Y-%m-%d\" $@ ; }; f"
  log-count-per-week          = "!f() { git log-count-per-date-format \"%Y#%V\" $@; }; f"
  log-count-per-month         = "!f() { git log-count-per-date-format \"%Y-%m\" $@ ; }; f"
  log-count-per-year          = "!f() { git log-count-per-date-format \"%Y\" $@ ; }; f"
  log-count-per-hour-of-day   = "!f() { git log-count-per-date-format \"%H\" $@; }; f"
  log-count-per-day-of-week   = "!f() { git log-count-per-date-format \"%u\" $@; }; f"
  log-count-per-week-of-year  = "!f() { git log-count-per-date-format \"%V\" $@; }; f"
#+end_src

* Lookup aliases
:PROPERTIES:
:header-args: :noweb-ref lookup
:END:

whois: given a string for an author, try to figure out full name and
email:

#+begin_src conf
  whois = "!sh -c 'git log --regexp-ignore-case -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
#+end_src

Given any git object, try to show it briefly

#+begin_src conf
  whatis = show --no-patch --pretty='tformat:%h (%s, %ad)' --date=short
#+end_src

Show who contributed with summarized changes

#+begin_src conf
  who = shortlog --summary --
#+end_src

Show who contributed, in descending order by number of commits

#+begin_src conf
  whorank = shortlog --summary --numbered --no-merges
#+end_src

* Workflow aliases
:PROPERTIES:
:header-args: :noweb-ref workflow
:END:

Force-push should always be a =git push --force-with-lease=.

#+begin_src conf
  pushf = push --force-with-lease
#+end_src

Stash aliases for push & pop

Note that if you are using an older version of git, before 2.16.0,
then you can use the older "stash save" instead of the newer "stash
push".

#+begin_src conf
  save = stash push
  pop = stash pop
#+end_src

Do a push/pull for just one branch

#+begin_src conf
  push1 = "!git push origin $(git branch-name)"
  pull1 = "!git pull origin $(git branch-name)"
#+end_src

Undo is simply a synonym for "reset" because "undo" can help novices.

#+begin_src conf
  undo-commit        = reset --soft HEAD~1
  undo-commit-hard   = reset --hard HEAD~1
#+end_src

Nicknames

#+begin_src conf
  uncommit = reset --soft HEAD~1
  unadd = reset HEAD
  unstage = reset HEAD
#+end_src

Discard changes in a (list of) file(s) in working tree

#+begin_src conf
  discard = checkout --
#+end_src

Friendly wording is easier to remember.

#+begin_src conf
  branches = branch -a
  tags = tag -n1 --list
  stashes = stash list
#+end_src

Tags by creation date.

#+begin_src conf
  tags-by-date = for-each-ref --sort=creatordate --format '%(refname) %(creatordate)' refs/tags
#+end_src

* Technical sections                                               :noexport:

** Main node

#+begin_src conf :tangle ".gitalias" :noweb yes
  [alias]

  <<oneletter>>
  <<add>>
  <<branch>>
  <<checkout>>
  <<commit>>
  <<diff>>
  <<fetch>>
  <<log>>
  <<log-aliases>>
  <<merge>>
  <<pull>>
  <<rebase>>
  <<show>>
  <<status>>
  <<lookup>>
  <<workflow>>
#+end_src

** Org properties

#+property: header-args :tangle no
#+property: header-args+ :padline no
