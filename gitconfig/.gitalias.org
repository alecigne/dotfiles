#+title: Git aliases

* About
:PROPERTIES:
:CREATED:  [2024-11-01 Fri 12:35]
:END:

These aliases were originally inspired from the [[https://github.com/GitAlias/gitalias][gitalias]] repo. They
were then tailored to my usage.

The source of truth is Git commands, so aliases are organized by
commands in this file.

** Shortcut aliases vs. command aliases
:PROPERTIES:
:CREATED:  [2024-11-01 Fri 13:32]
:END:

Generally speaking, these aliases can be divided into "shortcut
aliases" and "command aliases". A shortcut alias will be fast to type,
whereas a command alias will be like a new Git command: a
user-friendly way to express some Git action that would otherwise be
accomplished with a vanilla Git command + options.

For example, ~m~ is a shortcut for the default ~merge~ command. ~mfo~
is a shortcut for the ~merge~ command with the ~--ff-only~
option. ~merge-ff~ /could/ be the equivalent "command alias".

** Raw Git commands
:PROPERTIES:
:CREATED:  [2024-11-01 Fri 13:33]
:END:

Default, raw Git commands I use the most frequently are one-letter
shortcut aliases. They don't have options, because they should be as
close as the original command as possible.

|--------+------------|
| Letter | Command    |
|--------+------------|
| ~a~    | ~add~      |
| ~b~    | ~branch~   |
| ~c~    | ~commit~   |
| ~d~    | ~diff~     |
| ~e~    | ~reset~    |
| ~f~    | ~fetch~    |
| ~h~    | ~show~     |
| ~l~    | ~logs~     |
| ~m~    | ~merge~    |
| ~o~    | ~checkout~ |
| ~p~    | ~pull~     |
| ~r~    | ~rebase~   |
| ~s~    | ~status~   |
| ~t~    | ~tag~      |
| ~u~    | ~push~     |
|--------+------------|

** Git commands with options
:PROPERTIES:
:CREATED:  [2024-11-01 Fri 13:33]
:END:

Git commands with options are always multi-letter shortcut
aliases. They should be in the same order as the command followed by
its options:

- Right: ~fb = foo --bar~
- Wrong: ~bf = foo --bar~

As previously stated, Git commands with options can also have command
aliases.

** Reusing aliases
:PROPERTIES:
:CREATED:  [2024-11-01 Fri 13:36]
:END:

Aliases can be built on top of other aliases. This is especially true
for command aliases. For example:

#+begin_src conf :noexport
  ba = branch -a
  branches = ba
#+end_src

Note that Git doesn't care about the order in which aliases are
defined. However, for clarity, aliases are always defined first before
being reused in another.

* ~add~
:PROPERTIES:
:header-args: :noweb-ref add
:END:

~a~: main alias.

#+begin_src conf
  a = add
#+end_src

~aa~: add all.

#+begin_src conf
  aa = add --all
#+end_src

~ap~: add by patch - looks at each change, and asks if we want to put
it in the repo.

#+begin_src conf
  ap = add -p
#+end_src

* ~branch~
:PROPERTIES:
:header-args: :noweb-ref branch
:END:

~b~: main alias.

#+begin_src conf
  b = branch
#+end_src

~ba~ / ~branches~: list all branches.

#+begin_src conf
  ba = branch -a
  branches = ba
#+end_src

~br~ / ~remote-branches~: list all remote branches.

#+begin_src conf
  br = branch -r
  remote-branches = br
#+end_src

~bv~ / ~bvv~: show branches, be verbose.

#+begin_src conf
  bv = b -v
  bvv = b -vv
#+end_src

* ~checkout~
:PROPERTIES:
:header-args: :noweb-ref checkout
:END:

~o~: main alias.

#+begin_src conf
  o = checkout
#+end_src

~ob~: checkout in a new branch.

#+begin_src conf
  ob = checkout -b
#+end_src

~oc~: checkout in a branch and create it if it doesn't exist. Taken
from [[https://stackoverflow.com/a/35368157][here]].

#+begin_src conf
  oc = "!f() { git checkout $(git show-ref --verify --quiet refs/heads/\"$1\" || echo '-b') \"$1\"; }; f"
#+end_src

~ow~: checkout in the current week branch, creating it if it doesn't
exist.

#+begin_src conf
  ow = !git oc $(date +%Y-w%V)
#+end_src

* ~commit~
:PROPERTIES:
:header-args: :noweb-ref commit
:END:

# TODO Simplify/clarify these aliases.

~c~: main alias.

#+begin_src conf
  c = commit
#+end_src

~ca~: amend the tip of the current branch rather than creating a new
commit.

#+begin_src conf
  ca = commit --amend
#+end_src

~cane~: amend the tip of the current branch, and do not edit the
message.

#+begin_src conf
  cane = commit --amend --no-edit
#+end_src

~acane~: same, but add the files.

#+begin_src conf
  acane = commit -a --amend --no-edit
#+end_src

~acaneme~: Add, commit, amend, no edit, message empty.

#+begin_src conf
  acaneme = commit -a --amend --no-edit --allow-empty-message
#+end_src

~cm~: Commit with a message

#+begin_src conf
  cm = commit --message
#+end_src

~acm~: Add and commit with message.

#+begin_src conf
  acm = commit -am
#+end_src

~cme~: commit with an empty message (aka "Git as a filesystem")

#+begin_src conf
  cme = commit --message \"\" --allow-empty-message
#+end_src

~acme~: add and commit with an empty message.

#+begin_src conf
  acme = commit -am \"\" --allow-empty-message
#+end_src

~wip~: add and commit with a "wip" message. The =!= is explained [[https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases][here]]:

#+begin_quote
As you can tell, Git simply replaces the new command with whatever you
alias it for. However, maybe you want to run an external command,
rather than a Git subcommand. In that case, you start the command with
a ! character. This is useful if you write your own tools that work
with a Git repository.
#+end_quote

#+begin_src conf
  wip = !git add -A && git commit -m "wip"
#+end_src

~author~: changes the author of the last commit. Used in combination
with ~cane~, for ~commit --amend --no-edit~.

#+begin_src conf
  author = cane --author
#+end_src

~fix-author~: apply current user's information to the last commit. I
use it when I commit with a wrong configuration with =user.name= and
=user.email=.

#+begin_src conf
  apply-author = "!git author \"$(git config user.name) <$(git config user.email)>\""
#+end_src

* ~diff~
:PROPERTIES:
:header-args: :noweb-ref diff
:END:

~d~: main alias.

#+begin_src conf
  d = diff
#+end_src

~dc~: show staged changes against the current HEAD.

#+begin_src conf
  dc = diff --cached
#+end_src

* ~fetch~
:PROPERTIES:
:header-args: :noweb-ref fetch
:END:

~f~: main alias.

#+begin_src conf
  f = fetch
#+end_src

~fpt~: fetch the remote, remove any remote-tracking references that no
longer exist on the remote (except tags) and fetch all tags from the
remote.

#+begin_src conf
  fpt = fetch --prune --tags
#+end_src

* ~log~
:PROPERTIES:
:header-args: :noweb-ref log
:END:

~l~: main alias.

#+begin_src conf
  l = log
#+end_src

~lo~: ~log~ with one line per item and a pretty format (taken from
[[https://stackoverflow.com/questions/1441010/the-shortest-possible-output-from-git-log-containing-author-and-date#comment11498716_1441062][here]]).

#+begin_src conf
  lo = log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short
#+end_src

~ll~: ~log~ with a pretty format.

#+begin_src conf
  ll = log --graph --topo-order --abbrev-commit --date=short --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cblue%G?%Creset'
#+end_src

* ~merge~
:PROPERTIES:
:CREATED:  [2024-02-23 Fri 16:00]
:header-args: :noweb-ref merge
:END:

~m~: main alias.

#+begin_src conf
  m = merge
#+end_src

~mfo~: merge only if fast-forward is possible.

#+begin_src conf
  mfo = merge --ff-only
#+end_src

~mnf~: merge without fast-forward (create a merge commit).

#+begin_src conf
  mnf = merge --no-ff
#+end_src

* ~pull~
:PROPERTIES:
:header-args: :noweb-ref pull
:END:

~p~: main alias.

#+begin_src conf
  p = pull
#+end_src

* ~push~
:PROPERTIES:
:CREATED:  [2024-11-01 Fri 12:55]
:header-args: :noweb-ref push
:END:

~u~: main alias

#+begin_src conf
  u = push
#+end_src

~uf~ / ~force-push~: force-push with the ~--force-with-lease~
option. This option is slightly more secure this it prevents
overwriting work that hasn't been fetched.

#+begin_src conf
  uf = push --force-with-lease
  force-push = uf
#+end_src

* ~rebase~
:PROPERTIES:
:header-args: :noweb-ref rebase
:END:

# TODO Remove 'rb' aliases when I'll be used to 'r'.

~r~ / ~rb~: main alias. ~rb~ is an exception to my one-letter rule,
for compatibility with my muscle memory :)

#+begin_src conf
  r = rebase
  rb = r
#+end_src

~ra~: cancel the rebasing process.

#+begin_src conf
  ra = rebase --abort
  rba = ra
#+end_src

~rc~: continue the rebasing process after resolving a conflict
manually and updating the index with the resolution.

#+begin_src conf
  rc = rebase --continue
  rbc = rc
#+end_src

* ~reset~
:PROPERTIES:
:CREATED:  [2024-11-01 Fri 12:56]
:header-args: :noweb-ref reset
:END:

~e~: main alias.

#+begin_src conf
  e = reset
#+end_src

~rs~: undo commit, softly.

#+begin_src conf
  es = reset --soft HEAD~1
  undo-commit = es
#+end_src

~rh~: undo commit, hard. I'll usually prefer the ~uncommit~ command
alias.

#+begin_src conf
  eh = reset --hard HEAD~1
  undo-commit-hard = eh
  uncommit = eh
#+end_src

* ~show~
:PROPERTIES:
:CREATED:  [2024-11-01 Fri 12:42]
:header-args: :noweb-ref show
:END:

#+begin_src conf
  h = show
#+end_src

* ~status~
:PROPERTIES:
:CREATED:  [2024-11-01 Fri 12:44]
:header-args: :noweb-ref status
:END:

#+begin_src conf
  s = status
#+end_src

status with short format instead of full details

#+begin_src conf
  ss = status --short
#+end_src

status with short format and showing branch and tracking info.

#+begin_src conf
  ssb = status --short --branch
#+end_src

* ~tag~
:PROPERTIES:
:CREATED:  [2024-11-01 Fri 12:57]
:header-args: :noweb-ref tag
:END:

~t~: main alias.

#+begin_src conf
  t = tag
#+end_src

~td~: delete a tag.

#+begin_src conf
  td = tag -d
#+end_src

~tags~: list tags.

#+begin_src conf
  tags = tag -n1 --list
#+end_src

Tags by creation date.

#+begin_src conf
  tags-by-date = for-each-ref --sort=creatordate --format '%(refname) %(creatordate)' refs/tags
#+end_src

* Technical sections                                               :noexport:

** Main node

#+begin_src conf :tangle ".gitalias" :noweb yes
  [alias]

  <<add>>
  <<branch>>
  <<checkout>>
  <<commit>>
  <<diff>>
  <<fetch>>
  <<log>>
  <<merge>>
  <<pull>>
  <<push>>
  <<rebase>>
  <<reset>>
  <<show>>
  <<status>>
  <<tag>>
#+end_src

** Org properties

#+property: header-args :tangle no
#+property: header-args+ :padline no
